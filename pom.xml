<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.aws.codestar.projecttemplates</groupId>
    <artifactId>HelloWorld</artifactId>
    <version>1.0</version>
    <packaging>war</packaging>
    <name>Sample Java Spring web service Using AWS CodeStar</name>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.3.RELEASE</version>
    </parent>
    
  <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
      <java.version>1.8</java.version>
      <!-- Destination for JaCoCo report output -->
      <jacoco.maven.plugin.version>0.7.5.201505241946</jacoco.maven.plugin.version>
      <jacoco.it.execution.data.file>${project.build.directory}/coverage-reports/jacoco-it.exec</jacoco.it.execution.data.file>
      <jacoco.ut.execution.data.file>${project.build.directory}/coverage-reports/jacoco-ut.exec</jacoco.ut.execution.data.file>
	</properties>

	<dependencies>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20180130</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
        <!-- Junit Dependencies STARTS -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>2.18.0</version>
			<scope>test</scope>
		</dependency>
		<!-- Junit Dependencies ENDS -->
		
		
		<dependency>
		    <groupId>org.flywaydb</groupId>
		    <artifactId>flyway-core</artifactId>
		    <version>3.0</version>
		</dependency>
		<dependency>
		    <groupId>com.h2database</groupId>
		    <artifactId>h2</artifactId>
		    <version>1.4.197</version>
		</dependency>
		<dependency>
			<groupId>net.sf.dozer</groupId>
			<artifactId>dozer</artifactId>
			<version>5.4.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-hateoas</artifactId>
		</dependency>
		<dependency>
		    <groupId>org.hibernate</groupId>
		    <artifactId>hibernate-entitymanager</artifactId>
		</dependency>
		<!-- Spring Data JPA -->
		<dependency>
		    <groupId>org.springframework.data</groupId>
		    <artifactId>spring-data-jpa</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
	    <dependency>
	    	<groupId>org.springframework.session</groupId>
			<artifactId>spring-session-jdbc</artifactId>
	    </dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>
		
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>3.2.0</version>
                    <configuration>
                        <warSourceDirectory>src/main/webapp</warSourceDirectory>
                        <warName>ROOT</warName>
                        <failOnMissingWebXml>false</failOnMissingWebXml>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <configuration>
                      <!-- Sets the VM argument line used when unit tests are run. -->
                      <argLine>${surefireArgLine}</argLine>
                      <skipTests>false</skipTests>
                      <!-- Excludes integration tests when unit tests are run. -->
                    </configuration>                    
                    <version>2.19.1</version>
                </plugin>
                <plugin>
                  <groupId>org.jacoco</groupId>
                  <artifactId>jacoco-maven-plugin</artifactId>
                  <version>${jacoco.maven.plugin.version}</version>
                  <executions>
                    <!-- Prepares the property pointing to the JaCoCo runtime agent which 
                      is passed as VM argument when Maven the Surefire plugin is executed. -->
                    <execution>
                      <id>pre-unit-test</id>
                      <goals>
                        <goal>prepare-agent</goal>
                      </goals>
                      <configuration>
                        <!-- Sets the path to the file which contains the execution data. -->
                        <destFile>${jacoco.ut.execution.data.file}</destFile>
                        <!-- Sets the name of the property containing the settings for JaCoCo 
                          runtime agent. -->
                        <propertyName>surefireArgLine</propertyName>
                      </configuration>
                    </execution>
                    <!-- Ensures that the code coverage report for unit tests is created 
                      after unit tests have been run. -->
                    <execution>
                      <id>post-unit-test</id>
                      <phase>test</phase>
                      <goals>
                        <goal>report</goal>
                      </goals>
                      <configuration>
                        <!-- Sets the path to the file which contains the execution data. -->
                        <dataFile>${jacoco.ut.execution.data.file}</dataFile>
                        <!-- Sets the output directory for the code coverage report. -->
                        <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
                      </configuration>
                    </execution>
                  </executions>
                </plugin>                
            </plugins>
        </pluginManagement>
        <finalName>ROOT</finalName>
    </build>
	<profiles>
		<profile>
			<id>sonar</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
            <properties>
                <sonar.host.url>http://ec2-54-149-127-21.us-west-2.compute.amazonaws.com:9000/</sonar.host.url>
                <sonar.login>c1a0d2b1358f2233833cd210fec75f5dfd1363b9</sonar.login>
                <sonar.language>java</sonar.language>
                <sonar.jdbc.driver>org.postgresql.Driver</sonar.jdbc.driver>
                <sonar.sources>src/main/java</sonar.sources>
                <sonar.tests>src/test/java</sonar.tests>
                <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
                <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
                <sonar.jacoco.reportPath>${project.build.directory}/coverage-reports/jacoco-ut.exec</sonar.jacoco.reportPath>
            </properties>

		</profile>
</profiles>    
</project>
